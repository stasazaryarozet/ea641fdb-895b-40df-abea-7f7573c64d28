"""
Main migration agent class
"""

import time
from pathlib import Path
from typing import Optional
from loguru import logger
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn

from .config import Config
from extractors.tilda_extractor import TildaExtractor
from processors.content_processor import ContentProcessor
from deployers.google_cloud_deployer import GoogleCloudDeployer
from form_handlers.form_handler import FormHandler
from utils.logger import setup_logging


class MigrationAgent:
    """Main agent for Tilda to Google Cloud migration"""
    
    def __init__(self, config: Config, dry_run: bool = False):
        self.config = config
        self.dry_run = dry_run
        self.console = Console()
        
        # Initialize components
        self.extractor = TildaExtractor(config.tilda)
        self.processor = ContentProcessor(config.processing)
        self.deployer = GoogleCloudDeployer(config, dry_run)
        self.form_handler = FormHandler(config.forms)
        
        # Migration state
        self.extracted_data = None
        self.processed_data = None
        self.deployment_url = None
        
    def run(self):
        """Run complete migration process"""
        self.console.print("[bold blue]üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ Tilda ‚Üí Google Cloud[/bold blue]")
        
        try:
            # Step 1: Validate configuration
            self.console.print("\n[bold]1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...[/bold]")
            self.validate_configuration()
            
            # Step 2: Extract from Tilda
            self.console.print("\n[bold]2Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Tilda...[/bold]")
            self.extracted_data = self.extract_from_tilda()
            
            # Step 3: Process content
            self.console.print("\n[bold]3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...[/bold]")
            self.processed_data = self.process_content()
            
            # Step 4: Deploy to Google Cloud
            self.console.print("\n[bold]4Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Google Cloud...[/bold]")
            self.deployment_url = self.deployer.run_deployment(self.processed_data)
            
            self.console.print(f"\n[bold green]‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ![/bold green]")
            self.console.print(f"[green]üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {self.deployment_url}[/green]")
            
        except Exception as e:
            logger.error(f"Migration failed: {e}")
            self.console.print(f"\n[bold red]‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}[/bold red]")
            raise
    
    def validate_configuration(self):
        """Validate configuration and connections"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", total=None)
            
            # Validate config
            self.config.validate()
            
            # Test Tilda API connection
            self.extractor.test_connection()
            
            # Test Google Cloud connection
            self.deployer.test_connection()
            
            progress.update(task, description="‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    def extract_from_tilda(self):
        """Extract all data from Tilda"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Tilda...", total=None)
            
            # Extract pages
            pages = self.extractor.extract_pages()
            progress.update(task, description=f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # Extract assets
            assets = self.extractor.extract_assets()
            progress.update(task, description=f"üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(assets)} —Ä–µ—Å—É—Ä—Å–æ–≤")
            
            # Extract forms
            forms = self.extractor.extract_forms()
            progress.update(task, description=f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(forms)} —Ñ–æ—Ä–º")
            
            return {
                'pages': pages,
                'assets': assets,
                'forms': forms
            }
    
    def process_content(self):
        """Process extracted content"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...", total=None)
            
            # Process pages
            processed_pages = self.processor.process_pages(self.extracted_data['pages'])
            progress.update(task, description="üìÑ –°—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            # Process assets
            processed_assets = self.processor.process_assets(self.extracted_data['assets'])
            progress.update(task, description="üì¶ –†–µ—Å—É—Ä—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            # Process forms
            processed_forms = self.processor.process_forms(self.extracted_data['forms'])
            progress.update(task, description="üìù –§–æ—Ä–º—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            return {
                'pages': processed_pages,
                'assets': processed_assets,
                'forms': processed_forms
            }
    
    def deploy_to_google_cloud(self):
        """Deploy to Google Cloud"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Google Cloud...", total=None)
            
            # New deployment flow
            deployment_url = self.deployer.run_deployment(self.processed_data)
            progress.update(task, description="‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            return deployment_url
    
    def setup_forms(self):
        """Setup form handling (Now part of deployment)"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º...", total=None)
            
            progress.update(task, description="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def finalize_migration(self):
        """Finalize migration (Now part of deployment)"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞...", total=None)
            
            progress.update(task, description="‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def extract_only(self):
        """Only extract data from Tilda"""
        self.console.print("[bold blue]üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Tilda[/bold blue]")
        
        try:
            self.validate_configuration()
            self.extracted_data = self.extract_from_tilda()
            
            # Save extracted data
            output_dir = Path("extracted_data")
            output_dir.mkdir(exist_ok=True)
            
            # Save to files
            import json
            with open(output_dir / "pages.json", "w", encoding="utf-8") as f:
                json.dump(self.extracted_data['pages'], f, ensure_ascii=False, indent=2)
            
            with open(output_dir / "assets.json", "w", encoding="utf-8") as f:
                json.dump(self.extracted_data['assets'], f, ensure_ascii=False, indent=2)
            
            with open(output_dir / "forms.json", "w", encoding="utf-8") as f:
                json.dump(self.extracted_data['forms'], f, ensure_ascii=False, indent=2)
            
            self.console.print(f"[green]‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É {output_dir}[/green]")
            
        except Exception as e:
            logger.error(f"Extraction failed: {e}")
            self.console.print(f"[bold red]‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}[/bold red]")
            raise
    
    def deploy_only(self):
        """Only deploy to Google Cloud (assumes data is already extracted)"""
        self.console.print("[bold blue]‚òÅÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Google Cloud[/bold blue]")
        
        try:
            # Load extracted data
            import json
            extracted_dir = Path("extracted_data")
            
            if not extracted_dir.exists():
                raise FileNotFoundError("Extracted data not found. Run extract first.")
            
            with open(extracted_dir / "pages.json", "r", encoding="utf-8") as f:
                pages = json.load(f)
            with open(extracted_dir / "assets.json", "r", encoding="utf-8") as f:
                assets = json.load(f)
            with open(extracted_dir / "forms.json", "r", encoding="utf-8") as f:
                forms = json.load(f)
            
            self.extracted_data = {
                'pages': pages,
                'assets': assets,
                'forms': forms
            }
            
            # Process and deploy
            self.processed_data = self.process_content()
            self.deployment_url = self.deploy_to_google_cloud()
            self.setup_forms()
            self.finalize_migration()
            
            self.console.print(f"[green]‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.deployment_url}[/green]")
            
        except Exception as e:
            logger.error(f"Deployment failed: {e}")
            self.console.print(f"[bold red]‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}[/bold red]")
            raise 